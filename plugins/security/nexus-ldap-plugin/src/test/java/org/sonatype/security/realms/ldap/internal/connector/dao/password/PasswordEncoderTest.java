/*
 * Sonatype Nexus (TM) Open Source Version
 * Copyright (c) 2007-2014 Sonatype, Inc.
 * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
 *
 * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
 * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
 *
 * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
 * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
 * Eclipse Foundation. All other trademarks are the property of their respective owners.
 */

package org.sonatype.security.realms.ldap.internal.connector.dao.password;

import java.util.Map;

import org.sonatype.sisu.litmus.testsupport.TestSupport;

import com.google.common.collect.Maps;
import org.junit.Before;
import org.junit.Test;

import static junit.framework.Assert.assertFalse;
import static junit.framework.Assert.assertTrue;

public class PasswordEncoderTest
    extends TestSupport
{
  private PasswordEncoderManager passwordEncoderManager;

  @Before
  public void before()
      throws Exception
  {
    final Map<String, PasswordEncoder> encoderMap = Maps.newHashMap();
    encoderMap.put("clear", new ClearTextPasswordEncoder());
    encoderMap.put("crypt", new MD5CryptPasswordEncoder());
    encoderMap.put("md5", new MD5PasswordEncoder());
    encoderMap.put("plain", new PlainPasswordEncoder());
    encoderMap.put("sha", new SHA1PasswordEncoder());
    encoderMap.put("ssha", new SSHAPasswordEncoder());
    this.passwordEncoderManager = new DefaultPasswordEncoderManager(encoderMap);
  }

  @Test
  public void testMD5() {
    // String cryptPassword = "{MD5}VtAV1lfgo6fnA60qDj64iA=="; generated by apacheds (for testing), uses hash
    String cryptPassword = "{MD5}56d015d657e0a3a7e703ad2a0e3eb888"; // just a simple md5 of the string
    String password = "md5123";

    assertTrue(this.passwordEncoderManager.isPasswordValid(cryptPassword, password, null));
  }

  @Test
  public void testClear() {
    String cryptPassword = "clear123";
    String password = "clear123";

    assertTrue(this.passwordEncoderManager.isPasswordValid(cryptPassword, password, null));
    assertTrue(this.passwordEncoderManager.isPasswordValid("{CLEAR}" + cryptPassword, password, null));
  }

  @Test
  public void testCrypt() {
    // String cryptPassword = "{CRYPT}h/Uf.HBpLVxmY"; generated by apacheds (for testing)
    String cryptPassword = "{CRYPT}$1$SpIxKuJe$KTEcMasljm9eC3CfgE72t/"; // generated by MD5Crypt.class
    String password = "crypt123";

    assertTrue(this.passwordEncoderManager.isPasswordValid(cryptPassword, password, null));
  }

  @Test
  public void testPlain() {
    String cryptPassword = "plain123";
    String password = "plain123";

    assertTrue(this.passwordEncoderManager.isPasswordValid(cryptPassword, password, null));
    assertTrue(this.passwordEncoderManager.isPasswordValid("{PLAIN}" + cryptPassword, password, null));
  }

  @Test
  public void testSha() {
    String cryptPassword = "{SHA}5Rs+hbtHUzvAhwkuaV5g7hW2KGc=";
    String password = "sha123";

    assertTrue(this.passwordEncoderManager.isPasswordValid(cryptPassword, password, null));
  }

  @Test
  public void testSsha() {
    String cryptPassword = "{SSHA}JoYvOj2uRZsp5hPMVgWmuwh0CnDwSgiQXMwPkg==";
    String password = "ssha123";

    assertTrue(this.passwordEncoderManager.isPasswordValid(cryptPassword, password, null));
  }

  @Test
  public void testNull() {
    assertFalse(this.passwordEncoderManager.isPasswordValid(null, "non null string", null));
    assertFalse(this.passwordEncoderManager.isPasswordValid(null, null, null));
  }

}
